{"version":3,"sources":["components/FactoryList.jsx","components/Factory.jsx","util/Calculator.js","components/Credits.jsx","components/TechTree.jsx","components/FactoryContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["FactoryList","props","state","factoryName","this","filter","toLowerCase","includes","a","b","name","className","type","placeholder","onChange","e","setState","target","value","factories","f","filterList","sort","sortByName","map","key","id","onClick","onSelect","React","Component","Resource","data","amount","Factory","factory","Intl","NumberFormat","format","cost","upgradeCost","src","inputs","i","outputs","onlyUnique","index","self","indexOf","sumTotal","findTotalTechTreeBuildCost","techTree","getAllChildren","parents","flatMap","children","reduce","Credits","TreeNode","node","level","Fragment","c","idx","TechTree","tree","findChildFactoriesFor","goodsToProduce","childFactories","good","firstFactoryFound","find","o","push","length","totalInvestment","FactoryContainer","selectedFactory","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.612c6f19.chunk.js","sourcesContent":["import React from 'react';\r\nimport factories from '../data/factories.json';\r\n\r\nexport class FactoryList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    filterList(factoryName) {\r\n        if (!this.state.filter) {\r\n            return true;\r\n        }\r\n        return factoryName.toLowerCase().includes(this.state.filter);\r\n    }\r\n\r\n    sortByName(a, b) {\r\n        return a.name.toLowerCase() > b.name.toLowerCase();\r\n    }\r\n\r\n    render() {\r\n        return (<div className=\"factory-list\">\r\n            <input type=\"text\" className=\"search\" placeholder=\"search...\"\r\n                   onChange={e => this.setState({filter: e.target.value})}/>\r\n            {factories\r\n                .filter(f => this.filterList(f.name))\r\n                .sort(this.sortByName)\r\n                .map(f => (\r\n                    <div key={f.id} className=\"factory-row\" onClick={() => this.props.onSelect(f)}>{f.name}</div>))}\r\n        </div>);\r\n    }\r\n}","import React from \"react\";\r\n\r\nfunction Resource({data}) {\r\n    return (<div className=\"resource\">{data.amount}x {data.name}</div>);\r\n}\r\n\r\nexport function Factory({factory}) {\r\n    return (<div className=\"factory\">\r\n        <h2 className=\"name\">{factory.name}</h2>\r\n        <div className=\"wrapper\">\r\n            <div className=\"stats\">\r\n                <div className=\"label\">Type:</div>\r\n                <div>{factory.type}</div>\r\n                <div className=\"label\"> Cost:</div>\r\n                <div>{Intl.NumberFormat('en-US').format(factory.cost)} Cr</div>\r\n                <div className=\"label\">Upgrade Cost:</div>\r\n                <div>{Intl.NumberFormat('en-US').format(factory.upgradeCost)} Cr x Level</div>\r\n            </div>\r\n            <img src=\"icon.png\" className=\"icon\"/>\r\n        </div>\r\n        <div className=\"production\">\r\n            <div className=\"inputs\">\r\n                <h4>Inputs</h4>\r\n                {factory.inputs.map(i => (<Resource key={'i-' + i.id} data={i}/>))}\r\n            </div>\r\n            <div className=\"divider\">&gt;</div>\r\n            <div className=\"outputs\">\r\n                <h4>Outputs</h4>\r\n                {factory.outputs.map(i => (<Resource key={'i-' + i.id} data={i}/>))}\r\n            </div>\r\n        </div>\r\n    </div>);\r\n}","const onlyUnique = (value, index, self) => self.indexOf(value) === index;\r\nexport const sumTotal = (a, b) => a + b;\r\n\r\n\r\nfunction getAllChildren(parents) {\r\n    return [\r\n        ...parents,\r\n        ...parents.flatMap(f => getAllChildren(f.children))\r\n    ]\r\n}\r\n\r\nexport function findTotalTechTreeBuildCost(techTree) {\r\n    const allFactories = [techTree, ...getAllChildren(techTree.children)];\r\n    const uniqueFactories = allFactories.filter(onlyUnique);\r\n    return uniqueFactories.map(f => f.cost).reduce(sumTotal, 0);\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nexport function Credits({amount}){\r\n    return <span>{Intl.NumberFormat('en-US').format(amount)} Cr</span>\r\n}","import React from \"react\";\r\nimport factories from '../data/factories.json';\r\nimport {findTotalTechTreeBuildCost} from '../util/Calculator';\r\nimport {Credits} from \"./Credits\";\r\n\r\nfunction findChildFactoriesFor(goodsToProduce) {\r\n    const childFactories = [];\r\n    for (let i = 0; i < goodsToProduce.length; i++) {\r\n        const good = goodsToProduce[i].id;\r\n        const firstFactoryFound = factories.find(f => f.outputs.map(o => o.id).includes(good));\r\n        firstFactoryFound.children = findChildFactoriesFor(firstFactoryFound.inputs);\r\n        childFactories.push(firstFactoryFound);\r\n    }\r\n    return childFactories;\r\n}\r\n\r\nfunction TreeNode({node, onSelect, level = 0}) {\r\n    return (\r\n        <React.Fragment>\r\n            <div className={'indent-' + level} onClick={() => onSelect(node)}>&#x2514; {node.name}</div>\r\n            {node.children.map((c, idx) => <TreeNode key={node.id * idx}\r\n                                                     node={c}\r\n                                                     level={level + 1}\r\n                                                     onSelect={onSelect}/>)}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport function TechTree({factory, onSelect}) {\r\n    const tree = factory;\r\n    tree.children = findChildFactoriesFor(factory.inputs);\r\n\r\n    const totalInvestment = findTotalTechTreeBuildCost(tree);\r\n\r\n    return (\r\n        <div className=\"build-list\">\r\n            <h2>Total Build Cost: <Credits amount={totalInvestment}/></h2>\r\n            <div className=\"list\">\r\n                {tree.children.map((c, idx) => <TreeNode key={tree.id * idx} onSelect={onSelect} node={c} level={0}/>)}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport {Factory} from \"./Factory\";\r\nimport {TechTree} from \"./TechTree\";\r\n\r\nexport function FactoryContainer({selectedFactory, onSelect}) {\r\n    return (<div className=\"tech-tree\">\r\n        <Factory factory={selectedFactory}/>\r\n        <TechTree factory={selectedFactory} onSelect={onSelect}/>\r\n    </div>);\r\n}\r\n","import React from 'react';\nimport './styles/App.scss';\nimport {FactoryList} from \"./components/FactoryList\";\nimport {FactoryContainer} from \"./components/FactoryContainer\";\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedFactory: null\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <h1 className=\"title\">Avorion Economic Planner</h1>\n                <div className=\"content\">\n                    <FactoryList onSelect={selectedFactory => this.setState({selectedFactory})}></FactoryList>\n                    {this.state.selectedFactory && (\n                        <FactoryContainer selectedFactory={this.state.selectedFactory}\n                                          onSelect={selectedFactory => this.setState({selectedFactory})}\n                        ></FactoryContainer>)}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}