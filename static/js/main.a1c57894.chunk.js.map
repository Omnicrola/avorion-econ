{"version":3,"sources":["constants/FactoryTypeIcons.js","constants/environment.js","components/GameIcon.jsx","components/FactoryList.jsx","components/Credits.jsx","components/Factory.jsx","util/Calculator.js","constants/factory.js","components/TechTree.jsx","components/FactoryContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["FactoryTypeIcons","mine","collector","factory","solarpowerplant","farm","ranch","ENV","IMG_ROOT","GameIcon","src","size","className","FactoryListItem","selected","onClick","ListItem","button","key","id","type","toLowerCase","ListItemText","primary","name","FactoryList","onSelect","React","useState","selectedId","setSelectedId","filter","setFilter","onClickItem","Input","placeholder","onChange","e","target","value","List","factories","f","factoryName","includes","sort","a","b","map","index","Credits","amount","Intl","NumberFormat","format","Resource","data","good","goods","find","g","icon","Factory","Card","CardContent","cost","upgradeCost","outputCost","inputCost","inputs","i","outputs","onlyUnique","self","indexOf","sumTotal","findTotalTechTreeBuildCost","techTree","getAllChildren","parents","flatMap","children","reduce","UNKNOWN_FACTORY","garbages","TreeNode","node","level","Fragment","sourceFor","c","idx","TechTree","tree","findChildFactoriesFor","goodsToProduce","childFactories","goodToProduce","goodId","firstFactoryFound","o","push","length","totalInvestment","FactoryContainer","selectedFactory","App","props","state","setState","this","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a1c57894.chunk.js","sourcesContent":["export const FactoryTypeIcons = {\r\n    mine: 'rock.png',\r\n    collector: 'hydrogen.png',\r\n    factory: 'gears.png',\r\n    solarpowerplant: 'solar-cell.png',\r\n    farm: 'shiny-apple.png',\r\n    ranch: 'meat.png'\r\n};","const DEV = {\r\n    IMG_ROOT: 'avorion-econ/images/'\r\n};\r\n\r\nconst PROD = {\r\n    IMG_ROOT: '/avorion-econ/images/'\r\n};\r\n\r\nexport const ENV = process.env.NODE_ENV === 'production' ? PROD : DEV;\r\n","import React from 'react';\r\nimport {ENV} from '../constants/environment';\r\n\r\nexport const GameIcon = ({src, size = 'med'}) => {\r\n    return (<div className={`game-icon icon-size-${size}`}>\r\n        <div className=\"inner\">\r\n            <img src={ENV.IMG_ROOT + \"icons/\" + src}/>\r\n        </div>\r\n    </div>);\r\n};","import React from 'react';\r\nimport factories from '../data/factories.json';\r\nimport {Input} from '@material-ui/core';\r\nimport {List, ListItem, ListItemText, Icon} from '@material-ui/core';\r\nimport {FactoryTypeIcons} from \"../constants/FactoryTypeIcons\";\r\nimport {GameIcon} from \"./GameIcon\";\r\n\r\n\r\nconst FactoryListItem = ({factory, selected, onClick}) => {\r\n    return (\r\n        <ListItem button key={factory.id} selected={selected} onClick={() => onClick(factory)}>\r\n            <GameIcon size=\"sm\"\r\n                      src={FactoryTypeIcons[factory.type.toLowerCase()]}/>\r\n            <ListItemText primary={factory.name}/>\r\n        </ListItem>\r\n    );\r\n};\r\n\r\nexport const FactoryList = ({onSelect}) => {\r\n\r\n    const [selectedId, setSelectedId] = React.useState(1);\r\n    const [filter, setFilter] = React.useState();\r\n\r\n    const onClickItem = (factory) => {\r\n        setSelectedId(factory.id);\r\n        onSelect(factory);\r\n    };\r\n    const filterList = (factoryName) => {\r\n        if (!filter) return true;\r\n        return factoryName.toLowerCase().includes(filter);\r\n    }\r\n\r\n    return (\r\n        <div className=\"factory-list\">\r\n            <h2>Factories</h2>\r\n            <Input type=\"text\" className=\"search\" placeholder=\"search...\"\r\n                   onChange={e => setFilter((e.target.value || '').toLowerCase())}/>\r\n            <List className=\"list-container\">\r\n                {factories\r\n                    .filter(f => filterList(f.name))\r\n                    .sort((a, b) => a.name.toLowerCase() > b.name.toLowerCase())\r\n                    .map((f, index) => <FactoryListItem\r\n                        key={f.id}\r\n                        factory={f}\r\n                        selected={index === selectedId}\r\n                        onClick={onClickItem}/>)}\r\n            </List>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\n\r\nexport function Credits({amount}){\r\n    return <span>{Intl.NumberFormat('en-US').format(amount)} Cr</span>\r\n}","import React from \"react\";\r\nimport {GameIcon} from \"./GameIcon\";\r\nimport {FactoryTypeIcons} from \"../constants/FactoryTypeIcons\";\r\nimport goods from '../data/goods';\r\nimport {Card} from '@material-ui/core';\r\nimport {Credits} from \"./Credits\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\n\r\nfunction Resource({data}) {\r\n    const good = goods.find(g => g.id === data.id);\r\n    return (<div className=\"resource\"><GameIcon size=\"sm\" src={good.icon}/>{data.amount}x {data.name}</div>);\r\n}\r\n\r\nexport function Factory({factory}) {\r\n\r\n    return (<div className=\"factory\">\r\n        <Card>\r\n            <CardContent>\r\n                <h1 className=\"name\">{factory.name}</h1>\r\n                <div className=\"wrapper\">\r\n                    <div className=\"stats\">\r\n                        <div className=\"label\">Type:</div>\r\n                        <div>{factory.type}</div>\r\n                        <div className=\"label\"> Cost:</div>\r\n                        <div>{Intl.NumberFormat('en-US').format(factory.cost)} Cr</div>\r\n                        <div className=\"label\">Upgrade Cost:</div>\r\n                        <div>{Intl.NumberFormat('en-US').format(factory.upgradeCost)} Cr x Level</div>\r\n                        <div className=\"label\">Potential Profit Per Cycle:</div>\r\n                        <div>{Intl.NumberFormat('en-US').format(factory.outputCost - factory.inputCost)} Cr</div>\r\n                    </div>\r\n                    <GameIcon size=\"lg\" src={FactoryTypeIcons[factory.type.toLowerCase()]}/>\r\n                </div>\r\n            </CardContent>\r\n        </Card>\r\n\r\n        <Card className=\"production\">\r\n            <CardContent>\r\n                <h3>Production</h3>\r\n                <div className=\"input-output\">\r\n                    <div className=\"inputs\">\r\n                        <h4>Inputs</h4>\r\n                        <h5>Resource Cost: <Credits amount={factory.inputCost}/></h5>\r\n                        {factory.inputs.map(i => (\r\n                            <Resource key={'i-' + i.id} data={i}/>))}\r\n                    </div>\r\n                    <div className=\"divider\">&gt;</div>\r\n                    <div className=\"outputs\">\r\n                        <h4>Outputs</h4>\r\n                        <h5>Total Sales: <Credits amount={factory.outputCost}/></h5>\r\n                        {factory.outputs.map(i => (\r\n                            <Resource key={'i-' + i.id} data={i}/>))}\r\n                    </div>\r\n                </div>\r\n            </CardContent>\r\n        </Card>\r\n    </div>);\r\n}","const onlyUnique = (value, index, self) => self.indexOf(value) === index;\r\nexport const sumTotal = (a, b) => a + b;\r\n\r\n\r\nfunction getAllChildren(parents) {\r\n    return [\r\n        ...parents,\r\n        ...parents.flatMap(f => getAllChildren(f.children))\r\n    ]\r\n}\r\n\r\nexport function findTotalTechTreeBuildCost(techTree) {\r\n    const allFactories = [techTree, ...getAllChildren(techTree.children)];\r\n    const uniqueFactories = allFactories.filter(onlyUnique);\r\n    return uniqueFactories.map(f => f.cost).reduce(sumTotal, 0);\r\n}\r\n\r\n","export const UNKNOWN_FACTORY = {\r\n    id: -1,\r\n    name: \"No known factory\",\r\n    type: \"Factory\",\r\n    inputs: [],\r\n    outputs: [],\r\n    garbages: [],\r\n    cost: 0,\r\n    upgradeCost: 0,\r\n    inputCost: 0,\r\n    outputCost: 0\r\n};","import React from \"react\";\r\nimport factories from '../data/factories.json';\r\nimport {findTotalTechTreeBuildCost} from '../util/Calculator';\r\nimport {Credits} from \"./Credits\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport {GameIcon} from \"./GameIcon\";\r\nimport {FactoryTypeIcons} from \"../constants/FactoryTypeIcons\";\r\nimport {UNKNOWN_FACTORY} from \"../constants/factory\";\r\n\r\nfunction findChildFactoriesFor(goodsToProduce) {\r\n    const childFactories = [];\r\n    for (let i = 0; i < goodsToProduce.length; i++) {\r\n        let goodToProduce = goodsToProduce[i];\r\n        const goodId = goodToProduce.id;\r\n        let firstFactoryFound = factories.find(f => f.outputs.map(o => o.id).includes(goodId));\r\n        if (!firstFactoryFound) {\r\n            firstFactoryFound = {...UNKNOWN_FACTORY};\r\n        }\r\n        firstFactoryFound.children = findChildFactoriesFor(firstFactoryFound.inputs);\r\n        firstFactoryFound.sourceFor = goodToProduce.name;\r\n        childFactories.push(firstFactoryFound);\r\n    }\r\n    return childFactories;\r\n}\r\n\r\nfunction TreeNode({node, onSelect, level = 0}) {\r\n    return (\r\n        <React.Fragment>\r\n            <div className={'tree-node indent-' + level} onClick={() => onSelect(node)}>\r\n                &#x2514;<GameIcon size=\"sm\"\r\n                                  src={FactoryTypeIcons[node.type.toLowerCase()]}/>\r\n                                  {node.name} ({node.sourceFor})\r\n            </div>\r\n            {node.children.map((c, idx) => <TreeNode key={node.id * idx}\r\n                                                     node={c}\r\n                                                     level={level + 1}\r\n                                                     onSelect={onSelect}/>)}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport function TechTree({factory, onSelect}) {\r\n    const tree = factory;\r\n    tree.children = findChildFactoriesFor(factory.inputs);\r\n\r\n    const totalInvestment = findTotalTechTreeBuildCost(tree);\r\n\r\n    return (\r\n        <Card className=\"build-list\">\r\n            <CardContent>\r\n                <h2>Complete Tech Tree</h2>\r\n                <h3>Total Build Cost: <Credits amount={totalInvestment}/></h3>\r\n                <div className=\"list\">\r\n                    {tree.children.map((c, idx) => <TreeNode key={tree.id * idx} onSelect={onSelect} node={c}\r\n                                                             level={0}/>)}\r\n                </div>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}","import React from \"react\";\r\nimport {Factory} from \"./Factory\";\r\nimport {TechTree} from \"./TechTree\";\r\n\r\nexport function FactoryContainer({selectedFactory, onSelect}) {\r\n    return (<div className=\"tech-tree\">\r\n        <Factory factory={selectedFactory}/>\r\n        <TechTree factory={selectedFactory} onSelect={onSelect}/>\r\n    </div>);\r\n}\r\n","import React from 'react';\nimport './styles/App.scss';\nimport {FactoryList} from \"./components/FactoryList\";\nimport {FactoryContainer} from \"./components/FactoryContainer\";\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedFactory: null\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <h1 className=\"title\">Avorion Economic Planner</h1>\n                <div className=\"content\">\n                    <FactoryList onSelect={selectedFactory => this.setState({selectedFactory})}/>\n                    {this.state.selectedFactory && (\n                        <FactoryContainer selectedFactory={this.state.selectedFactory}\n    onSelect={selectedFactory => this.setState({selectedFactory})}\n    />)}\n                </div>\n                <div className=\"footer\">\n                    <a href=\"https://www.avorion.net/\" target=\"_new\">Avorion Home</a> |\n                    <a href=\"https://avorion.gamepedia.com/Avorion_Wiki/\" target=\"_new\">Avorion Wiki</a> |\n                    <a href=\"https://github.com/Omnicrola/avorion-econ/\" target=\"_new\">GitHub Source</a></div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}